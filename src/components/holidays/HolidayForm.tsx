import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useNavigate } from "react-router-dom";
import { toast } from "sonner";
import { format } from "date-fns";

import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { 
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue 
} from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverTrigger, PopoverContent } from "@/components/ui/popover";
import { Switch } from "@/components/ui/switch";
import { cn } from "@/lib/utils";
import { CalendarIcon, Loader2 } from "lucide-react";
import { Holiday, HolidayFormData, HolidayType, BlockingType } from "@/types/holiday";
import { useHolidayById, useHolidays } from "@/hooks/useHolidays";
import { Card, CardContent } from "@/components/ui/card";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { formatTime } from "@/utils/dateUtils";

const formSchema = z.object({
  date: z.date({
    required_error: "A data do feriado é obrigatória",
  }),
  name: z.string().min(2, {
    message: "O nome deve ter pelo menos 2 caracteres",
  }),
  type: z.enum(["national", "state", "municipal", "custom"], {
    required_error: "Selecione o tipo de feriado",
  }),
  description: z.string().optional(),
  isActive: z.boolean().default(true),
  blockingType: z.enum(["full_day", "morning", "afternoon", "custom"], {
    required_error: "Selecione o tipo de bloqueio",
  }).default("full_day"),
  customStartTime: z.string().optional().refine(val => {
    if (val === undefined || val === "") return true;
    return /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/.test(val);
  }, {
    message: "Formato de hora inválido (HH:MM)",
  }),
  customEndTime: z.string().optional().refine(val => {
    if (val === undefined || val === "") return true;
    return /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/.test(val);
  }, {
    message: "Formato de hora inválido (HH:MM)",
  }),
}).refine((data) => {
  if (data.blockingType === "custom") {
    return data.customStartTime !== undefined && data.customEndTime !== undefined;
  }
  return true;
}, {
  message: "Defina o horário inicial e final para bloqueio personalizado",
  path: ["customStartTime"],
});

interface HolidayFormProps {
  defaultValues?: Holiday | null;
  onCancel: () => void;
}

const HolidayForm: React.FC<HolidayFormProps> = ({ defaultValues, onCancel }) => {
  const navigate = useNavigate();
  const { createHoliday, updateHoliday, isCreating, isUpdating } = useHolidays();
  const isEditing = Boolean(defaultValues?.id);
  const isAutoGenerated = defaultValues?.autoGenerated || false;

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: defaultValues
      ? {
          date: defaultValues.date ? new Date(defaultValues.date) : new Date(),
          name: defaultValues.name,
          type: defaultValues.type,
          description: defaultValues.description,
          isActive: defaultValues.isActive,
          blockingType: defaultValues.blockingType || "full_day",
          customStartTime: defaultValues.customStartTime,
          customEndTime: defaultValues.customEndTime,
        }
      : {
          date: new Date(),
          name: "",
          type: "custom" as HolidayType,
          description: "",
          isActive: true,
          blockingType: "full_day" as BlockingType,
          customStartTime: "09:00",
          customEndTime: "18:00",
        },
  });

  // Watch the blocking type to conditionally show time inputs
  const blockingType = form.watch("blockingType");

  const onSubmit = async (data: z.infer<typeof formSchema>) => {
    try {
      const holidayData: HolidayFormData = {
        date: data.date,
        name: data.name,
        type: data.type as HolidayType,
        description: data.description,
        isActive: data.isActive,
        blockingType: data.blockingType as BlockingType,
        customStartTime: data.blockingType === "custom" ? data.customStartTime : undefined,
        customEndTime: data.blockingType === "custom" ? data.customEndTime : undefined,
      };

      if (isEditing && defaultValues?.id) {
        await updateHoliday({ id: defaultValues.id, data: holidayData });
        toast.success("Feriado atualizado com sucesso!");
      } else {
        await createHoliday(holidayData);
        toast.success("Feriado adicionado com sucesso!");
      }
      
      navigate("/dashboard/holidays");
    } catch (error) {
      console.error("Erro ao salvar feriado:", error);
      toast.error(
        isEditing
          ? "Erro ao atualizar feriado. Tente novamente."
          : "Erro ao adicionar feriado. Tente novamente."
      );
    }
  };

  return (
    <Card>
      <CardContent className="pt-6">
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Campo de Data */}
              <FormField
                control={form.control}
                name="date"
                render={({ field }) => (
                  <FormItem className="flex flex-col">
                    <FormLabel>Data</FormLabel>
                    <Popover>
                      <PopoverTrigger asChild>
                        <FormControl>
                          <Button
                            variant={"outline"}
                            className={cn(
                              "pl-3 text-left font-normal",
                              !field.value && "text-muted-foreground"
                            )}
                            disabled={isAutoGenerated}
                          >
                            {field.value ? (
                              format(field.value, "dd/MM/yyyy")
                            ) : (
                              <span>Selecione uma data</span>
                            )}
                            <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                          </Button>
                        </FormControl>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-0" align="start">
                        <Calendar
                          mode="single"
                          selected={field.value}
                          onSelect={field.onChange}
                          disabled={(date) =>
                            date < new Date("1900-01-01")
                          }
                          initialFocus
                        />
                      </PopoverContent>
                    </Popover>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Campo de Nome */}
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Nome</FormLabel>
                    <FormControl>
                      <Input placeholder="Nome do feriado" {...field} disabled={isAutoGenerated} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Campo de Tipo */}
              <FormField
                control={form.control}
                name="type"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Tipo</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                      disabled={isAutoGenerated}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Selecione o tipo" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="national">Nacional</SelectItem>
                        <SelectItem value="state">Estadual</SelectItem>
                        <SelectItem value="municipal">Municipal</SelectItem>
                        <SelectItem value="custom">Personalizado</SelectItem>
                      </SelectContent>
                    </Select>
                    {!isAutoGenerated && (
                      <FormDescription>
                        Selecione o tipo de feriado para categorização.
                      </FormDescription>
                    )}
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Campo de Ativo */}
              <FormField
                control={form.control}
                name="isActive"
                render={({ field }) => (
                  <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm">
                    <div className="space-y-0.5">
                      <FormLabel>Ativo</FormLabel>
                      <FormDescription>
                        {isEditing 
                          ? "Determina se o feriado bloqueia agendamentos."
                          : "Bloquear agendamentos nesta data."}
                      </FormDescription>
                    </div>
                    <FormControl>
                      <Switch
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            {/* Tipo de Bloqueio */}
            <FormField
              control={form.control}
              name="blockingType"
              render={({ field }) => (
                <FormItem className="space-y-3">
                  <FormLabel>Tipo de Bloqueio</FormLabel>
                  <FormControl>
                    <RadioGroup
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                      className="flex flex-col space-y-1"
                    >
                      <div className="flex items-center space-x-2">
                        <RadioGroupItem value="full_day" id="full_day" />
                        <FormLabel htmlFor="full_day" className="font-normal cursor-pointer">
                          Dia inteiro
                        </FormLabel>
                      </div>
                      <div className="flex items-center space-x-2">
                        <RadioGroupItem value="morning" id="morning" />
                        <FormLabel htmlFor="morning" className="font-normal cursor-pointer">
                          Manhã (até 12:00)
                        </FormLabel>
                      </div>
                      <div className="flex items-center space-x-2">
                        <RadioGroupItem value="afternoon" id="afternoon" />
                        <FormLabel htmlFor="afternoon" className="font-normal cursor-pointer">
                          Tarde (após 12:00)
                        </FormLabel>
                      </div>
                      <div className="flex items-center space-x-2">
                        <RadioGroupItem value="custom" id="custom" />
                        <FormLabel htmlFor="custom" className="font-normal cursor-pointer">
                          Personalizado
                        </FormLabel>
                      </div>
                    </RadioGroup>
                  </FormControl>
                  <FormDescription>
                    Define como o feriado bloqueia os horários de agendamento.
                  </FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />

            {blockingType === "custom" && (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <FormField
                  control={form.control}
                  name="customStartTime"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Horário Inicial</FormLabel>
                      <FormControl>
                        <Input
                          placeholder="09:00"
                          {...field}
                          value={field.value || ""}
                        />
                      </FormControl>
                      <FormDescription>Formato: HH:MM (24h)</FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="customEndTime"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Horário Final</FormLabel>
                      <FormControl>
                        <Input
                          placeholder="18:00"
                          {...field}
                          value={field.value || ""}
                        />
                      </FormControl>
                      <FormDescription>Formato: HH:MM (24h)</FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            )}

            {/* Campo de Descrição */}
            <FormField
              control={form.control}
              name="description"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Descrição</FormLabel>
                  <FormControl>
                    <Textarea
                      placeholder="Descrição opcional do feriado"
                      {...field}
                      value={field.value || ""}
                    />
                  </FormControl>
                  <FormDescription>
                    Forneça informações adicionais sobre o feriado (opcional).
                  </FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />

            <div className="flex justify-end space-x-4">
              <Button
                type="button"
                variant="outline"
                onClick={onCancel}
              >
                Cancelar
              </Button>
              <Button 
                type="submit"
                disabled={isCreating || isUpdating}
              >
                {(isCreating || isUpdating) && (
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                )}
                {isEditing ? "Atualizar" : "Adicionar"} Feriado
              </Button>
            </div>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
};

export default HolidayForm;
