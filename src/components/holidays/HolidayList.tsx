import React, { useState } from "react";
import { Holiday } from "@/types/holiday";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import {
  Calendar,
  Edit,
  Trash,
  Check,
  X,
  Loader2,
  CalendarRange,
  Download,
  Clock,
} from "lucide-react";
import { format } from "date-fns";
import { Badge } from "@/components/ui/badge";
import { toast } from "sonner";
import { useHolidays } from "@/hooks/useHolidays";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";

interface HolidayListProps {
  holidays: Holiday[];
  isLoading: boolean;
  onEdit: (holiday: Holiday) => void;
  onImport: () => void;
}

const HolidayList: React.FC<HolidayListProps> = ({ 
  holidays, 
  isLoading, 
  onEdit,
  onImport 
}) => {
  const { deleteHoliday, isDeleting } = useHolidays();
  
  const [deleteDialog, setDeleteDialog] = useState<{ open: boolean, holiday: Holiday | null }>({
    open: false,
    holiday: null
  });

  // Filter out system blocking entries
  const filteredHolidays = holidays.filter(holiday => 
    !holiday.name.includes("Bloqueio de Horário (Sistema)")
  );

  const handleDelete = async () => {
    if (deleteDialog.holiday) {
      try {
        await deleteHoliday(deleteDialog.holiday.id);
        toast.success(`Feriado "${deleteDialog.holiday.name}" excluído com sucesso.`);
        setDeleteDialog({ open: false, holiday: null });
      } catch (error) {
        toast.error("Erro ao excluir feriado.");
      }
    }
  };

  const openDeleteDialog = (holiday: Holiday) => {
    setDeleteDialog({ open: true, holiday });
  };

  if (isLoading) {
    return (
      <div className="flex h-40 items-center justify-center rounded-md border border-dashed">
        <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
      </div>
    );
  }

  return (
    <>
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl font-bold">Feriados</h2>
        <div className="flex space-x-2">
          <Button 
            variant="outline"
            onClick={onImport}
          >
            <Download className="h-4 w-4 mr-2" />
            Importar Nacionais
          </Button>
        </div>
      </div>

      {filteredHolidays.length === 0 ? (
        <div className="flex h-40 flex-col items-center justify-center rounded-md border border-dashed">
          <CalendarRange className="h-8 w-8 text-muted-foreground mb-2" />
          <p className="text-muted-foreground">Nenhum feriado cadastrado</p>
          <Button 
            variant="link" 
            onClick={() => onEdit({ 
              id: '', 
              date: new Date().toISOString().split('T')[0],
              name: '', 
              type: 'custom', 
              isActive: true, 
              blockingType: 'full_day',
              autoGenerated: false,
              createdAt: '',
              updatedAt: ''
            })}
          >
            Adicionar feriado
          </Button>
        </div>
      ) : (
        <div className="rounded-md border">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Data</TableHead>
                <TableHead>Nome</TableHead>
                <TableHead>Tipo</TableHead>
                <TableHead>Bloqueio</TableHead>
                <TableHead>Ativo</TableHead>
                <TableHead className="text-right">Ações</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredHolidays.map((holiday) => (
                <TableRow key={holiday.id} className={holiday.autoGenerated ? "bg-muted/20" : ""}>
                  <TableCell>
                    <div className="flex items-center">
                      <Calendar className="mr-2 h-4 w-4 text-muted-foreground" />
                      {format(new Date(holiday.date), "dd/MM/yyyy")}
                      {holiday.autoGenerated && (
                        <Badge variant="outline" className="ml-2 text-xs">Auto</Badge>
                      )}
                    </div>
                  </TableCell>
                  <TableCell>{holiday.name}</TableCell>
                  <TableCell>{getHolidayTypeBadge(holiday.type)}</TableCell>
                  <TableCell>{getBlockingTypeBadge(holiday)}</TableCell>
                  <TableCell>
                    {holiday.isActive ? (
                      <Check className="h-5 w-5 text-green-500" />
                    ) : (
                      <X className="h-5 w-5 text-red-500" />
                    )}
                  </TableCell>
                  <TableCell className="text-right">
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() => onEdit(holiday)}
                    >
                      <Edit className="h-4 w-4" />
                    </Button>
                    <Button 
                      variant="ghost" 
                      size="icon"
                      onClick={() => openDeleteDialog(holiday)}
                    >
                      <Trash className="h-4 w-4" />
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
      )}
      
      <AlertDialog 
        open={deleteDialog.open} 
        onOpenChange={(open) => setDeleteDialog({ ...deleteDialog, open })}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Excluir Feriado</AlertDialogTitle>
            <AlertDialogDescription>
              Tem certeza que deseja excluir o feriado "{deleteDialog.holiday?.name}"?
              Esta ação não pode ser desfeita.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancelar</AlertDialogCancel>
            <AlertDialogAction 
              onClick={handleDelete}
              className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
              disabled={isDeleting}
            >
              {isDeleting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
              Excluir
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
};

function getHolidayTypeBadge(type: string) {
  switch (type) {
    case "national":
      return <Badge variant="default">Nacional</Badge>;
    case "state":
      return <Badge variant="secondary">Estadual</Badge>;
    case "municipal":
      return <Badge variant="outline">Municipal</Badge>;
    case "custom":
      return <Badge variant="destructive">Personalizado</Badge>;
    default:
      return null;
  }
}

function getBlockingTypeBadge(holiday: Holiday) {
  switch (holiday.blockingType) {
    case "full_day":
      return (
        <div className="flex items-center">
          <Clock className="h-4 w-4 mr-1 text-muted-foreground" />
          <span>Dia inteiro</span>
        </div>
      );
    case "morning":
      return (
        <div className="flex items-center">
          <Clock className="h-4 w-4 mr-1 text-yellow-500" />
          <span>Manhã (até 12:00)</span>
        </div>
      );
    case "afternoon":
      return (
        <div className="flex items-center">
          <Clock className="h-4 w-4 mr-1 text-orange-500" />
          <span>Tarde (após 12:00)</span>
        </div>
      );
    case "custom":
      return (
        <div className="flex items-center">
          <Clock className="h-4 w-4 mr-1 text-blue-500" />
          <span>
            {holiday.customStartTime} - {holiday.customEndTime}
          </span>
        </div>
      );
    default:
      return null;
  }
}

export default HolidayList;
