
import React, { useState, useEffect } from "react";
import { format } from "date-fns";
import { Calendar as CalendarIcon } from "lucide-react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";

import { 
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetFooter
} from "@/components/ui/sheet";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Switch } from "@/components/ui/switch";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { cn } from "@/lib/utils";
import { useHolidays } from "@/hooks/useHolidays";
import { BlockingType, Holiday, HolidayFormData, HolidayType } from "@/types/holiday";
import { Loader2 } from "lucide-react";
import { toast } from "sonner";

const formSchema = z.object({
  date: z.date({
    required_error: "A data do feriado é obrigatória",
  }),
  name: z.string().min(2, {
    message: "O nome deve ter pelo menos 2 caracteres",
  }),
  type: z.enum(["national", "state", "municipal", "custom"], {
    required_error: "Selecione o tipo de feriado",
  }),
  description: z.string().optional(),
  isActive: z.boolean().default(true),
  blockingType: z.enum(["full_day", "morning", "afternoon", "custom"], {
    required_error: "Selecione o tipo de bloqueio",
  }).default("full_day"),
  customStartTime: z.string().optional(),
  customEndTime: z.string().optional(),
}).refine((data) => {
  if (data.blockingType === "custom") {
    return data.customStartTime && data.customEndTime;
  }
  return true;
}, {
  message: "Defina o horário inicial e final para bloqueio personalizado",
  path: ["customStartTime"],
});

interface HolidaySheetProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  holiday?: Holiday;
}

export const HolidaySheet: React.FC<HolidaySheetProps> = ({
  open,
  onOpenChange,
  holiday
}) => {
  const isEditing = Boolean(holiday?.id);
  const { createHoliday, updateHoliday, isCreating, isUpdating } = useHolidays();
  const isAutoGenerated = holiday?.autoGenerated || false;

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      date: holiday?.date ? new Date(holiday.date) : new Date(),
      name: holiday?.name || "",
      type: holiday?.type || "custom" as HolidayType,
      description: holiday?.description || "",
      isActive: holiday?.isActive !== undefined ? holiday.isActive : true,
      blockingType: holiday?.blockingType || "full_day" as BlockingType,
      customStartTime: holiday?.customStartTime || "09:00",
      customEndTime: holiday?.customEndTime || "18:00",
    },
  });

  // Reset form when holiday changes or when sheet opens/closes
  useEffect(() => {
    if (open) {
      form.reset({
        date: holiday?.date ? new Date(holiday.date) : new Date(),
        name: holiday?.name || "",
        type: holiday?.type || "custom" as HolidayType,
        description: holiday?.description || "",
        isActive: holiday?.isActive !== undefined ? holiday.isActive : true,
        blockingType: holiday?.blockingType || "full_day" as BlockingType,
        customStartTime: holiday?.customStartTime || "09:00",
        customEndTime: holiday?.customEndTime || "18:00",
      });
    }
  }, [holiday, open, form]);

  const blockingType = form.watch("blockingType");

  const onSubmit = async (data: z.infer<typeof formSchema>) => {
    try {
      const holidayData: HolidayFormData = {
        date: data.date,
        name: data.name,
        type: data.type as HolidayType,
        description: data.description,
        isActive: data.isActive,
        blockingType: data.blockingType as BlockingType,
        customStartTime: data.blockingType === "custom" ? data.customStartTime : undefined,
        customEndTime: data.blockingType === "custom" ? data.customEndTime : undefined,
      };

      if (isEditing && holiday?.id) {
        await updateHoliday({ id: holiday.id, data: holidayData });
        toast.success("Feriado atualizado com sucesso!");
      } else {
        await createHoliday(holidayData);
        toast.success("Feriado adicionado com sucesso!");
      }

      onOpenChange(false);
    } catch (error) {
      console.error("Erro ao salvar feriado:", error);
      toast.error(
        isEditing
          ? "Erro ao atualizar feriado. Tente novamente."
          : "Erro ao adicionar feriado. Tente novamente."
      );
    }
  };

  return (
    <Sheet open={open} onOpenChange={onOpenChange}>
      <SheetContent className="overflow-y-auto">
        <SheetHeader>
          <SheetTitle>{isEditing ? "Editar" : "Novo"} Feriado</SheetTitle>
        </SheetHeader>

        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6 py-4">
            {/* Campo de Nome */}
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Nome do feriado</FormLabel>
                  <FormControl>
                    <Input placeholder="Nome" {...field} disabled={isAutoGenerated} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            {/* Campo de Data */}
            <FormField
              control={form.control}
              name="date"
              render={({ field }) => (
                <FormItem className="flex flex-col">
                  <FormLabel>Data do feriado</FormLabel>
                  <Popover>
                    <PopoverTrigger asChild>
                      <FormControl>
                        <Button
                          variant={"outline"}
                          className={cn(
                            "w-full pl-3 text-left font-normal",
                            !field.value && "text-muted-foreground"
                          )}
                          disabled={isAutoGenerated}
                        >
                          {field.value ? (
                            format(field.value, "dd/MM/yyyy")
                          ) : (
                            <span>Escolha uma data</span>
                          )}
                          <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                        </Button>
                      </FormControl>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={field.value}
                        onSelect={field.onChange}
                        initialFocus
                        className="pointer-events-auto"
                      />
                    </PopoverContent>
                  </Popover>
                  <FormMessage />
                </FormItem>
              )}
            />

            {/* Campo de Tipo */}
            <FormField
              control={form.control}
              name="type"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Tipo</FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                    disabled={isAutoGenerated}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Selecione o tipo" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      <SelectItem value="national">Nacional</SelectItem>
                      <SelectItem value="state">Estadual</SelectItem>
                      <SelectItem value="municipal">Municipal</SelectItem>
                      <SelectItem value="custom">Personalizado</SelectItem>
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />

            {/* Campo de Ativo - Bloquear agendamentos */}
            <FormField
              control={form.control}
              name="isActive"
              render={({ field }) => (
                <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm">
                  <div className="space-y-0.5">
                    <FormLabel>Bloquear agendamentos</FormLabel>
                  </div>
                  <FormControl>
                    <Switch
                      checked={field.value}
                      onCheckedChange={field.onChange}
                    />
                  </FormControl>
                </FormItem>
              )}
            />

            {/* Configuração do Bloqueio */}
            {form.watch("isActive") && (
              <div className="space-y-3 p-4 border rounded-lg">
                <div className="font-medium">Configuração do Bloqueio</div>

                {/* Período de Bloqueio */}
                <FormField
                  control={form.control}
                  name="blockingType"
                  render={({ field }) => (
                    <FormItem className="space-y-3">
                      <FormLabel>Período de Bloqueio</FormLabel>
                      <FormControl>
                        <RadioGroup
                          onValueChange={field.onChange}
                          defaultValue={field.value}
                          className="flex flex-col space-y-1"
                        >
                          <div className="flex items-center space-x-2">
                            <RadioGroupItem value="full_day" id="full_day" />
                            <FormLabel htmlFor="full_day" className="font-normal cursor-pointer">
                              Dia Inteiro
                            </FormLabel>
                          </div>
                          <div className="flex items-center space-x-2">
                            <RadioGroupItem value="morning" id="morning" />
                            <FormLabel htmlFor="morning" className="font-normal cursor-pointer">
                              Manhã (até 12:00)
                            </FormLabel>
                          </div>
                          <div className="flex items-center space-x-2">
                            <RadioGroupItem value="afternoon" id="afternoon" />
                            <FormLabel htmlFor="afternoon" className="font-normal cursor-pointer">
                              Tarde (após 12:00)
                            </FormLabel>
                          </div>
                          <div className="flex items-center space-x-2">
                            <RadioGroupItem value="custom" id="custom" />
                            <FormLabel htmlFor="custom" className="font-normal cursor-pointer">
                              Personalizado
                            </FormLabel>
                          </div>
                        </RadioGroup>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Campos de horário personalizado */}
                {blockingType === "custom" && (
                  <div className="grid grid-cols-2 gap-4">
                    <FormField
                      control={form.control}
                      name="customStartTime"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Horário Inicial</FormLabel>
                          <FormControl>
                            <Input
                              placeholder="09:00"
                              {...field}
                              value={field.value || ""}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="customEndTime"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Horário Final</FormLabel>
                          <FormControl>
                            <Input
                              placeholder="18:00"
                              {...field}
                              value={field.value || ""}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                )}
              </div>
            )}

            <SheetFooter className="flex justify-end gap-2">
              <Button 
                type="button"
                variant="outline"
                onClick={() => onOpenChange(false)}
              >
                Cancelar
              </Button>
              <Button 
                type="submit"
                disabled={isCreating || isUpdating}
              >
                {(isCreating || isUpdating) && (
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                )}
                {isEditing ? "Atualizar" : "Criar"}
              </Button>
            </SheetFooter>
          </form>
        </Form>
      </SheetContent>
    </Sheet>
  );
};
