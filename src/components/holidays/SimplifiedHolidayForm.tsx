
import React from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { useHolidays } from "@/hooks/useHolidays";
import { Holiday, HolidayFormData } from "@/types/holiday";

import { Form } from "@/components/ui/form";
import { HolidayFormBasicInfo } from "./form/HolidayFormBasicInfo";
import { HolidayFormBlockingConfig } from "./form/HolidayFormBlockingConfig";
import { HolidayFormCustomTimes } from "./form/HolidayFormCustomTimes";
import { HolidayFormActions } from "./form/HolidayFormActions";

// Define form schema using zod
const holidayFormSchema = z.object({
  name: z.string().min(2, { message: "Nome deve ter pelo menos 2 caracteres" }),
  date: z.date({ required_error: "Data é obrigatória" }),
  type: z.enum(["national", "state", "municipal", "custom"], {
    required_error: "Selecione o tipo de feriado",
  }),
  isActive: z.boolean().default(true),
  blockingType: z.enum(["full_day", "morning", "afternoon", "custom"], { 
    required_error: "Tipo de bloqueio é obrigatório" 
  }).default("full_day"),
  customStartTime: z.string().optional(),
  customEndTime: z.string().optional(),
});

export type HolidayFormValues = z.infer<typeof holidayFormSchema>;

interface SimplifiedHolidayFormProps {
  defaultValues?: Holiday | null;
  onCancel: () => void;
  onFormChange?: () => void;
  onSuccess?: () => void;
}

export const SimplifiedHolidayForm: React.FC<SimplifiedHolidayFormProps> = ({
  defaultValues,
  onCancel,
  onFormChange,
  onSuccess,
}) => {
  const { createHoliday, updateHoliday, isCreating, isUpdating } = useHolidays();
  const isEditing = Boolean(defaultValues?.id);

  const form = useForm<HolidayFormValues>({
    resolver: zodResolver(holidayFormSchema),
    defaultValues: {
      name: defaultValues?.name || "",
      date: defaultValues?.date ? new Date(defaultValues.date) : new Date(),
      type: defaultValues?.type || "custom",
      isActive: defaultValues?.isActive !== undefined ? defaultValues.isActive : true,
      blockingType: defaultValues?.blockingType || "full_day",
      customStartTime: defaultValues?.customStartTime || "",
      customEndTime: defaultValues?.customEndTime || "",
    },
  });

  // Listen for form changes and call onFormChange when they happen
  React.useEffect(() => {
    const subscription = form.watch(() => {
      if (onFormChange) {
        onFormChange();
      }
    });
    return () => subscription.unsubscribe();
  }, [form, onFormChange]);

  const showBlockingConfig = form.watch("isActive");
  const blockingType = form.watch("blockingType");

  const handleSubmit = async (data: HolidayFormValues) => {
    try {
      // Preparando os dados básicos do feriado
      const holidayData: HolidayFormData = {
        name: data.name,
        date: data.date,
        type: data.type,
        isActive: data.isActive,
        blockingType: data.blockingType,
      };

      // Adicionando campos customStartTime e customEndTime apenas se blockingType for 'custom'
      if (data.blockingType === 'custom') {
        holidayData.customStartTime = data.customStartTime || undefined;
        holidayData.customEndTime = data.customEndTime || undefined;
      }

      if (isEditing && defaultValues?.id) {
        await updateHoliday({ 
          id: defaultValues.id, 
          data: holidayData
        });
      } else {
        await createHoliday(holidayData);
      }
      
      // Call onSuccess after successful form submission
      if (onSuccess) {
        onSuccess();
      }
    } catch (error) {
      console.error("Error submitting holiday form:", error);
    }
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(handleSubmit)} className="space-y-4">
        <HolidayFormBasicInfo 
          form={form} 
          isAutoGenerated={defaultValues?.autoGenerated} 
        />

        {showBlockingConfig && (
          <div className="space-y-3 border p-3 rounded-md">
            <h4 className="font-medium">Configuração de Bloqueio</h4>
            
            <HolidayFormBlockingConfig form={form} />

            {blockingType === "custom" && <HolidayFormCustomTimes form={form} />}
          </div>
        )}

        <HolidayFormActions 
          onCancel={onCancel} 
          isSubmitting={isCreating || isUpdating} 
          isEditing={isEditing} 
        />
      </form>
    </Form>
  );
};
