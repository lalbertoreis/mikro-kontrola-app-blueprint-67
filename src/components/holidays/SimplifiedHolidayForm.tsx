
import React, { useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { format } from "date-fns";
import { CalendarIcon, Loader2 } from "lucide-react";
import { cn } from "@/lib/utils";
import { useHolidays } from "@/hooks/useHolidays";
import { Holiday, HolidayType, BlockingType } from "@/types/holiday";
import { toast } from "sonner";

import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverTrigger, PopoverContent } from "@/components/ui/popover";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";

const formSchema = z.object({
  name: z.string().min(2, {
    message: "O nome deve ter pelo menos 2 caracteres",
  }),
  date: z.date({
    required_error: "A data do feriado é obrigatória",
  }),
  type: z.enum(["national", "state", "municipal", "custom"], {
    required_error: "Selecione o tipo de feriado",
  }),
  isActive: z.boolean().default(true),
  blockingType: z.enum(["full_day", "morning", "afternoon", "custom"], {
    required_error: "Selecione o tipo de bloqueio",
  }).default("full_day"),
  customStartTime: z.string().optional(),
  customEndTime: z.string().optional(),
});

interface SimplifiedHolidayFormProps {
  defaultValues?: Holiday | null;
  onCancel: () => void;
  onFormChange?: () => void;
}

export const SimplifiedHolidayForm: React.FC<SimplifiedHolidayFormProps> = ({ 
  defaultValues, 
  onCancel,
  onFormChange
}) => {
  const isEditing = Boolean(defaultValues?.id);
  const { createHoliday, updateHoliday, isCreating, isUpdating } = useHolidays();
  const isAutoGenerated = defaultValues?.autoGenerated || false;

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: defaultValues
      ? {
          name: defaultValues.name,
          date: defaultValues.date ? new Date(defaultValues.date) : new Date(),
          type: defaultValues.type,
          isActive: defaultValues.isActive,
          blockingType: defaultValues.blockingType || "full_day",
          customStartTime: defaultValues.customStartTime,
          customEndTime: defaultValues.customEndTime,
        }
      : {
          name: "",
          date: new Date(),
          type: "national" as HolidayType,
          isActive: true,
          blockingType: "full_day" as BlockingType,
          customStartTime: "09:00",
          customEndTime: "18:00",
        },
  });

  // Set up the form change watcher
  useEffect(() => {
    if (onFormChange) {
      const subscription = form.watch(() => onFormChange());
      return () => subscription.unsubscribe();
    }
  }, [form, onFormChange]);

  // Watch values for conditional rendering
  const showBlockingConfig = form.watch("isActive");
  const blockingType = form.watch("blockingType");

  const onSubmit = async (data: z.infer<typeof formSchema>) => {
    try {
      const holidayData = {
        date: data.date,
        name: data.name,
        type: data.type as HolidayType,
        isActive: data.isActive,
        blockingType: data.blockingType as BlockingType,
        customStartTime: data.blockingType === "custom" ? data.customStartTime : undefined,
        customEndTime: data.blockingType === "custom" ? data.customEndTime : undefined,
      };

      if (isEditing && defaultValues?.id) {
        await updateHoliday({ id: defaultValues.id, data: holidayData });
        toast.success("Feriado atualizado com sucesso!");
      } else {
        await createHoliday(holidayData);
        toast.success("Feriado adicionado com sucesso!");
      }
      
      onCancel();  // Close dialog after successful submission
    } catch (error) {
      console.error("Erro ao salvar feriado:", error);
      toast.error(
        isEditing
          ? "Erro ao atualizar feriado. Tente novamente."
          : "Erro ao adicionar feriado. Tente novamente."
      );
    }
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4 py-2">
        {/* Campo de Nome */}
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Nome do feriado</FormLabel>
              <FormControl>
                <Input placeholder="Nome" {...field} disabled={isAutoGenerated} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        {/* Campo de Data */}
        <FormField
          control={form.control}
          name="date"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Data do feriado</FormLabel>
              <Popover>
                <PopoverTrigger asChild>
                  <FormControl>
                    <Button
                      variant={"outline"}
                      className={cn(
                        "w-full pl-3 text-left font-normal",
                        !field.value && "text-muted-foreground"
                      )}
                      disabled={isAutoGenerated}
                    >
                      {field.value ? (
                        format(field.value, "dd/MM/yyyy")
                      ) : (
                        <span>Escolha uma data</span>
                      )}
                      <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                    </Button>
                  </FormControl>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0" align="start">
                  <Calendar
                    mode="single"
                    selected={field.value}
                    onSelect={field.onChange}
                    initialFocus
                    className={cn("p-3 pointer-events-auto")}
                  />
                </PopoverContent>
              </Popover>
              <FormMessage />
            </FormItem>
          )}
        />

        {/* Campo de Tipo */}
        <FormField
          control={form.control}
          name="type"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Tipo</FormLabel>
              <Select
                onValueChange={field.onChange}
                defaultValue={field.value}
                disabled={isAutoGenerated}
              >
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Selecione o tipo" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  <SelectItem value="national">Nacional</SelectItem>
                  <SelectItem value="state">Estadual</SelectItem>
                  <SelectItem value="municipal">Municipal</SelectItem>
                  <SelectItem value="custom">Personalizado</SelectItem>
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />

        {/* Bloquear agendamentos */}
        <FormField
          control={form.control}
          name="isActive"
          render={({ field }) => (
            <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm">
              <div className="space-y-0.5">
                <FormLabel>Bloquear agendamentos</FormLabel>
              </div>
              <FormControl>
                <Switch
                  checked={field.value}
                  onCheckedChange={field.onChange}
                />
              </FormControl>
            </FormItem>
          )}
        />

        {/* Configuração do Bloqueio */}
        {showBlockingConfig && (
          <div className="space-y-3 p-4 border rounded-lg">
            <div className="font-medium">Configuração do Bloqueio</div>

            {/* Período de Bloqueio */}
            <FormField
              control={form.control}
              name="blockingType"
              render={({ field }) => (
                <FormItem className="space-y-3">
                  <FormLabel>Período de Bloqueio</FormLabel>
                  <FormControl>
                    <RadioGroup
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                      className="flex flex-col space-y-1"
                    >
                      <div className="flex items-center space-x-2">
                        <RadioGroupItem value="full_day" id="full_day" />
                        <FormLabel htmlFor="full_day" className="font-normal cursor-pointer">
                          Dia inteiro
                        </FormLabel>
                      </div>
                      <div className="flex items-center space-x-2">
                        <RadioGroupItem value="morning" id="morning" />
                        <FormLabel htmlFor="morning" className="font-normal cursor-pointer">
                          Manhã (até 12:00)
                        </FormLabel>
                      </div>
                      <div className="flex items-center space-x-2">
                        <RadioGroupItem value="afternoon" id="afternoon" />
                        <FormLabel htmlFor="afternoon" className="font-normal cursor-pointer">
                          Tarde (após 12:00)
                        </FormLabel>
                      </div>
                      <div className="flex items-center space-x-2">
                        <RadioGroupItem value="custom" id="custom" />
                        <FormLabel htmlFor="custom" className="font-normal cursor-pointer">
                          Personalizado
                        </FormLabel>
                      </div>
                    </RadioGroup>
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            {/* Campos de horário personalizado (visíveis apenas quando blockingType é "custom") */}
            {blockingType === "custom" && (
              <div className="grid grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="customStartTime"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Horário Inicial</FormLabel>
                      <FormControl>
                        <Input
                          placeholder="09:00"
                          {...field}
                          value={field.value || ""}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="customEndTime"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Horário Final</FormLabel>
                      <FormControl>
                        <Input
                          placeholder="18:00"
                          {...field}
                          value={field.value || ""}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            )}
          </div>
        )}

        <div className="flex justify-end space-x-2 pt-2">
          <Button 
            type="button" 
            variant="outline" 
            onClick={onCancel}
          >
            Cancelar
          </Button>
          <Button 
            type="submit" 
            disabled={isCreating || isUpdating}
            className="bg-kontrola-600 hover:bg-kontrola-700"
          >
            {(isCreating || isUpdating) && (
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
            )}
            {isEditing ? "Atualizar" : "Criar"}
          </Button>
        </div>
      </form>
    </Form>
  );
};
