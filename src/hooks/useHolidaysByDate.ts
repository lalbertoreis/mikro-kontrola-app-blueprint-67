
import { useQuery } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { Holiday } from "@/types/holiday";

export function useHolidaysByDate(date: string) {
  return useQuery({
    queryKey: ["holidays-by-date", date],
    queryFn: async () => {
      if (!date) return [];
      
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) return [];
      
      // First, check if user is an employee with permissions
      const { data: employeePermissions } = await supabase
        .from('employee_permissions')
        .select('business_owner_id, can_view_calendar')
        .eq('user_id', user.id)
        .eq('can_view_calendar', true)
        .maybeSingle();

      let holidaysQuery = supabase
        .from('holidays')
        .select('*')
        .eq('date', date)
        .eq('is_active', true);

      // If user is an employee, get holidays from business owner
      // If user is owner, get their own holidays
      if (employeePermissions?.business_owner_id) {
        console.log("User is employee, fetching business holidays from owner:", employeePermissions.business_owner_id);
        holidaysQuery = holidaysQuery.eq('user_id', employeePermissions.business_owner_id);
      } else {
        console.log("User is business owner, fetching own holidays");
        holidaysQuery = holidaysQuery.eq('user_id', user.id);
      }
      
      const { data, error } = await holidaysQuery;
      
      if (error) {
        console.error('Error fetching holidays by date:', error);
        return [];
      }
      
      return (data || []).map((item: any) => ({
        id: item.id,
        date: item.date,
        name: item.name,
        type: item.type,
        description: item.description || undefined,
        isActive: item.is_active,
        blockingType: item.blocking_type,
        customStartTime: item.custom_start_time || undefined,
        customEndTime: item.custom_end_time || undefined,
        autoGenerated: item.auto_generated || false,
        createdAt: item.created_at,
        updatedAt: item.updated_at
      })) as Holiday[];
    },
    enabled: !!date,
    staleTime: 1000 * 60 * 5, // 5 minutes
  });
}
